{
    "title": "Token Counter",
    "description": "Accurately counts and tracks tokens in real time to optimize input limits.\n",
    "name": "token-counter",
    "type": "registry:ui",
    "dependencies": ["gsap", "@gsap/react"],
    "files": [
        {
            "path": "ai/token-counter.tsx",
            "type": "registry:ui",
            "target": "~/components/ai/token-counter.tsx",
            "content": "\"use client\";\n\nimport { ComponentProps, RefObject, useRef, useState } from \"react\";\nimport { ClassNameValue } from \"tailwind-merge\";\n\nimport { useGSAP } from \"@gsap/react\";\nimport gsap from \"gsap\";\nimport { MotionPathPlugin } from \"gsap/MotionPathPlugin\";\n\nimport { cn } from \"@/lib/utils\";\n\ngsap.registerPlugin(MotionPathPlugin);\n\ntype TokenCounterProps = ComponentProps<\"p\"> & {\n    sourceRef: RefObject<HTMLElement | null>;\n    token: number;\n    flyingClassName?: ClassNameValue;\n};\n\nexport const TokenCounter = ({ sourceRef, token, className, flyingClassName, ...props }: TokenCounterProps) => {\n    const [currentCount, setCurrentCount] = useState(token);\n    const counterRef = useRef<HTMLParagraphElement>(null);\n    const flyingTokenRef = useRef<HTMLParagraphElement>(null);\n    const animationTimeline = useRef<gsap.core.Timeline | null>(null);\n\n    useGSAP(\n        () => {\n            const tokenDifference = token - currentCount;\n            const counterElement = counterRef.current;\n            const sourceElement = sourceRef.current;\n            const flyingElement = flyingTokenRef.current;\n\n            if (!counterElement || !sourceElement || !flyingElement) return;\n\n            flyingElement.innerText = `${tokenDifference > 0 ? \"+\" : \"\"}${tokenDifference}`;\n\n            const buttonRect = sourceElement.getBoundingClientRect();\n            const counterRect = counterElement.getBoundingClientRect();\n            const flyingRect = flyingElement.getBoundingClientRect();\n\n            const startPosition = {\n                x: buttonRect.left + buttonRect.width / 2 - flyingRect.width / 2,\n                y: buttonRect.top,\n            };\n            const endPosition = {\n                x: counterRect.left + counterRect.width / 2 - flyingRect.width / 2,\n                y: counterRect.top,\n            };\n            const midPosition = {\n                x: (startPosition.x + endPosition.x) / 2,\n                y: Math.min(startPosition.y, endPosition.y) - 20,\n            };\n\n            gsap.set(flyingElement, {\n                x: startPosition.x,\n                y: startPosition.y,\n                scale: 0,\n                opacity: 0,\n                clipPath: \"circle(0% at 50% 50%)\",\n            });\n\n            animationTimeline.current?.kill();\n\n            const obj = { value: currentCount };\n            const targetValue = token;\n\n            const tl = gsap.timeline();\n            animationTimeline.current = tl;\n\n            tl.to(\n                flyingElement,\n                {\n                    duration: 1.5,\n                    ease: \"power2.inOut\",\n                    motionPath: {\n                        path: [startPosition, midPosition, endPosition],\n                        autoRotate: false,\n                    },\n                },\n                0,\n            );\n\n            tl.to(\n                flyingElement,\n                {\n                    opacity: 1,\n                    scale: 1,\n                    clipPath: \"circle(100% at 50% 50%)\",\n                    duration: 0.5,\n                    ease: \"power1.out\",\n                },\n                0,\n            );\n\n            tl.to(\n                flyingElement,\n                {\n                    opacity: 0,\n                    scale: 0.5,\n                    clipPath: \"circle(0% at 50% 50%)\",\n                    duration: 0.3,\n                    ease: \"power1.in\",\n                },\n                1.0,\n            );\n\n            tl.to(\n                obj,\n                {\n                    value: targetValue,\n                    duration: 1,\n                    ease: \"power1.out\",\n                    onUpdate: () => setCurrentCount(Math.floor(obj.value)),\n                    onComplete: () => setCurrentCount(token),\n                },\n                1,\n            );\n        },\n        { dependencies: [token] },\n    );\n\n    return (\n        <>\n            <p {...props} ref={counterRef} className={className}>\n                {currentCount}\n            </p>\n\n            <p\n                ref={flyingTokenRef}\n                className={cn(\"pointer-events-none fixed\", flyingClassName)}\n                style={{\n                    top: 0,\n                    left: 0,\n                    willChange: \"transform, opacity, clip-path\",\n                }}>\n                +0\n            </p>\n        </>\n    );\n};\n"
        }
    ]
}
