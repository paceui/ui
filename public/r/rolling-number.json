{
    "title": "Rolling Number",
    "description": "Animate numbers with smooth vertical digit transitions",
    "name": "rolling-number",
    "type": "registry:ui",
    "dependencies": ["gsap", "@gsap/react"],
    "files": [
        {
            "path": "gsap/rolling-number.tsx",
            "type": "registry:ui",
            "target": "~/components/gsap/rolling-number.tsx",
            "content": "\"use client\";\n\nimport { useEffect, useRef } from \"react\";\n\nimport { useGSAP } from \"@gsap/react\";\nimport gsap from \"gsap\";\n\nimport { cn } from \"@/lib/utils\";\n\ntype RollingDigitProps = {\n    digit: number;\n    duration?: number;\n    height?: number;\n};\n\nconst RollingDigit = ({ digit, duration = 1, height = 20 }: RollingDigitProps) => {\n    const containerRef = useRef<HTMLDivElement>(null);\n\n    useGSAP(\n        () => {\n            gsap.to(containerRef.current, {\n                y: -height * (digit + 1),\n                duration: duration,\n                ease: \"power4.out\",\n            });\n        },\n        { dependencies: [digit] },\n    );\n\n    return (\n        <div ref={containerRef} className=\"text-center\" style={{ transform: `translateY(-${height}px)` }}>\n            <span style={{ height: height }} className=\"block\">\n                9\n            </span>\n            {[...Array(10).keys()].map((num) => (\n                <span key={num} style={{ height: height }} className=\"block\">\n                    {num}\n                </span>\n            ))}\n            <span style={{ height: height }} className=\"block\">\n                0\n            </span>\n        </div>\n    );\n};\n\ntype RollingNumberProps = {\n    targetNumber: number | string;\n    duration?: number;\n    height?: number;\n    onComplete?: () => void;\n    className?: string;\n};\n\nexport const RollingNumber = ({ targetNumber, duration = 1, onComplete, height, className }: RollingNumberProps) => {\n    const digits = String(targetNumber).split(\"\");\n\n    useEffect(() => {\n        const interval = setTimeout(() => {\n            onComplete?.();\n        }, duration * 1000);\n        return () => clearTimeout(interval);\n    }, [duration, onComplete]);\n\n    return (\n        <div className={cn(\"inline-flex\", className)}>\n            {digits.map((digit, i) => (\n                <RollingDigit key={i} digit={Number(digit)} duration={duration} height={height} />\n            ))}\n        </div>\n    );\n};\n"
        }
    ]
}
