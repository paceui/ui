{
    "title": "Modal Selector",
    "description": "AI-focused model selector with preview, tooltips, and capability indicators built-in",
    "name": "modal-selector",
    "type": "registry:ui",
    "dependencies": ["gsap", "@gsap/react"],
    "registryDependencies": ["@paceui-ui/swap", "button"],
    "files": [
        {
            "path": "ai/modal-selector.tsx",
            "type": "registry:ui",
            "target": "~/components/ai/modal-selector.tsx",
            "content": "\"use client\";\n\nimport { BrainIcon, CodeIcon, EyeIcon, FileSearch2Icon, SpeechIcon, Wand2Icon } from \"lucide-react\";\nimport { ComponentProps, ReactNode, useMemo, useState } from \"react\";\n\nimport { Swap } from \"@/components/gsap/swap\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\n\ntype ModalCapability = \"vision\" | \"thinking\" | \"code\" | \"speech\" | \"search\" | \"creativity\";\n\nexport type ModalOption = {\n    value: string;\n    image: string;\n    name: string;\n    darkInvertImage?: boolean;\n    description: string;\n    capabilities: ModalCapability[];\n};\n\ntype ModalSelectorProps = ComponentProps<typeof Button> & {\n    showCapabilities?: boolean;\n    showDescription?: boolean;\n};\n\nconst modals: ModalOption[] = [\n    {\n        value: \"openai-gpt-4o\",\n        image: \"https://unpkg.com/@lobehub/icons-static-svg@latest/icons/openai.svg\",\n        name: \"gpt-4o\",\n        darkInvertImage: true,\n        description: \"High-speed language understanding and generation\",\n        capabilities: [\"vision\", \"thinking\", \"code\", \"speech\"],\n    },\n    {\n        value: \"google-gemini-1.5\",\n        image: \"https://unpkg.com/@lobehub/icons-static-svg@latest/icons/gemini-color.svg\",\n        name: \"gemini-1.5\",\n        description: \"Advanced multimodal processing for text and images\",\n        capabilities: [\"vision\", \"thinking\", \"speech\"],\n    },\n    {\n        value: \"anthropic-claude-3-opus\",\n        image: \"https://unpkg.com/@lobehub/icons-static-svg@latest/icons/claude-color.svg\",\n        name: \"claude-3-opus\",\n        description: \"Deep contextual reasoning for complex tasks\",\n        capabilities: [\"thinking\", \"code\"],\n    },\n    {\n        value: \"xai-grok-1\",\n        image: \"https://unpkg.com/@lobehub/icons-static-svg@latest/icons/grok.svg\",\n        name: \"grok-1\",\n        darkInvertImage: true,\n        description: \"Conversational AI from xAI for real-time interactions\",\n        capabilities: [\"thinking\", \"speech\"],\n    },\n    {\n        value: \"qwen-1.5\",\n        image: \"https://unpkg.com/@lobehub/icons-static-svg@latest/icons/qwen-color.svg\",\n        name: \"qwen-1.5\",\n        description: \"Efficient large language model by Alibaba Cloud\",\n        capabilities: [\"thinking\", \"code\"],\n    },\n    {\n        value: \"openai-gpt-4-turbo\",\n        image: \"https://unpkg.com/@lobehub/icons-static-svg@latest/icons/openai.svg\",\n        name: \"gpt-4-turbo\",\n        darkInvertImage: true,\n        description: \"Optimized for fast and cost-effective workflows\",\n        capabilities: [\"thinking\", \"code\", \"speech\"],\n    },\n    {\n        value: \"google-gemini-ultra\",\n        image: \"https://unpkg.com/@lobehub/icons-static-svg@latest/icons/gemini-color.svg\",\n        name: \"gemini-ultra\",\n        description: \"Cutting-edge reasoning and creativity features\",\n        capabilities: [\"vision\", \"thinking\", \"creativity\"],\n    },\n    {\n        value: \"deepseek-llm\",\n        image: \"https://unpkg.com/@lobehub/icons-static-svg@latest/icons/deepseek-color.svg\",\n        name: \"deepseek-llm\",\n        description: \"Multilingual model for global use cases\",\n        capabilities: [\"thinking\", \"code\"],\n    },\n    {\n        value: \"anthropic-claude-3-sonnet\",\n        image: \"https://unpkg.com/@lobehub/icons-static-svg@latest/icons/claude-color.svg\",\n        name: \"claude-3-sonnet\",\n        description: \"Balanced model for efficiency and safety\",\n        capabilities: [\"thinking\"],\n    },\n    {\n        value: \"stability-sdxl\",\n        image: \"https://unpkg.com/@lobehub/icons-static-svg@latest/icons/stability-color.svg\",\n        name: \"stability-sdxl\",\n        description: \"Text-to-image generation at photorealistic quality\",\n        capabilities: [\"vision\", \"creativity\"],\n    },\n    {\n        value: \"microsoft-copilot\",\n        image: \"https://unpkg.com/@lobehub/icons-static-svg@latest/icons/microsoft-color.svg\",\n        name: \"copilot\",\n        description: \"Integrated productivity assistant from Microsoft\",\n        capabilities: [\"thinking\", \"code\", \"speech\"],\n    },\n    {\n        value: \"midjourney-v6\",\n        image: \"https://unpkg.com/@lobehub/icons-static-svg@latest/icons/midjourney.svg\",\n        name: \"midjourney-v6\",\n        darkInvertImage: true,\n        description: \"AI art generation for creative visuals\",\n        capabilities: [\"vision\", \"creativity\"],\n    },\n    {\n        value: \"perplexity-answers\",\n        image: \"https://unpkg.com/@lobehub/icons-static-svg@latest/icons/perplexity-color.svg\",\n        name: \"perplexity-answers\",\n        description: \"AI-powered search and question answering\",\n        capabilities: [\"search\", \"thinking\"],\n    },\n    {\n        value: \"cohere-command-r\",\n        image: \"https://unpkg.com/@lobehub/icons-static-svg@latest/icons/cohere-color.svg\",\n        name: \"command-r\",\n        description: \"Powerful retrieval-augmented generation model\",\n        capabilities: [\"thinking\", \"search\"],\n    },\n];\n\nconst CapabilityBadge = ({ capability }: { capability: ModalCapability }) => {\n    const styles: Record<ModalCapability, { color: string; text: string; icon: ReactNode }> = {\n        thinking: {\n            color: \"bg-purple-500/10 hover:bg-purple-500/20 text-purple-500\",\n            text: \"Thinking\",\n            icon: <BrainIcon className=\"size-4.5\" />,\n        },\n        code: {\n            color: \"bg-cyan-500/10 hover:bg-cyan-500/20 text-cyan-500\",\n            text: \"Code\",\n            icon: <CodeIcon className=\"size-4.5\" />,\n        },\n        vision: {\n            color: \"bg-green-500/10 hover:bg-green-500/20 text-green-500\",\n            text: \"Vision\",\n            icon: <EyeIcon className=\"size-4.5\" />,\n        },\n        creativity: {\n            color: \"bg-orange-500/10 hover:bg-orange-500/20 text-orange-500\",\n            text: \"Creativity\",\n            icon: <Wand2Icon className=\"size-4.5\" />,\n        },\n        search: {\n            color: \"bg-teal-500/10 hover:bg-teal-500/20 text-teal-500\",\n            text: \"Search\",\n            icon: <FileSearch2Icon className=\"size-4.5\" />,\n        },\n        speech: {\n            color: \"bg-pink-500/10 hover:bg-pink-500/20 text-pink-500\",\n            text: \"Speech\",\n            icon: <SpeechIcon className=\"size-4.5\" />,\n        },\n    };\n\n    const { color, text, icon } = styles[capability];\n\n    return (\n        <Tooltip>\n            <TooltipTrigger asChild>\n                <div className={cn(\"rounded p-1\", color)}>{icon}</div>\n            </TooltipTrigger>\n            <TooltipContent>\n                <p>{text}</p>\n            </TooltipContent>\n        </Tooltip>\n    );\n};\n\nexport const ModalSelector = ({\n    showDescription = true,\n    showCapabilities = true,\n    variant = \"outline\",\n    className,\n    ...props\n}: ModalSelectorProps) => {\n    const [selectedModal, setSelectedModal] = useState(modals[0].value);\n\n    const selectedModalItem = useMemo(() => {\n        return modals.find((item) => item.value === selectedModal) ?? modals[0];\n    }, [selectedModal]);\n\n    return (\n        <TooltipProvider>\n            <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                    <Button\n                        {...props}\n                        variant={variant}\n                        className={cn(\"cursor-pointer overflow-hidden shadow-none select-none\", className)}>\n                        <Swap state={selectedModalItem} effects={[\"blur\", \"slideDown\", \"opacity\"]}>\n                            {(state) => (\n                                <div className=\"flex items-center gap-2.5\">\n                                    <img\n                                        src={state.image}\n                                        className={cn(\"min-w-4.5\", { \"dark:invert\": state.darkInvertImage })}\n                                        alt={`${state.name} logo`}\n                                    />\n                                    <p className=\"text-base overflow-ellipsis\">{state.name}</p>\n                                    {showCapabilities && (\n                                        <div className=\"flex items-center gap-1.5\">\n                                            {state.capabilities.map((capability) => (\n                                                <CapabilityBadge capability={capability} key={capability} />\n                                            ))}\n                                        </div>\n                                    )}\n                                </div>\n                            )}\n                        </Swap>\n                    </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent className=\"w-80 shadow-xs transition-all hover:shadow-md\" align=\"start\">\n                    <ScrollArea className=\"h-80\">\n                        <div className=\"space-y-0.5\">\n                            {modals.map((item) => (\n                                <DropdownMenuItem\n                                    key={item.value}\n                                    onClick={() => setSelectedModal(item.value)}\n                                    className={cn(\"group relative cursor-pointer gap-3\", {\n                                        \"bg-accent\": selectedModal === item.value,\n                                    })}>\n                                    <img\n                                        src={item.image}\n                                        alt={`${item.name} logo`}\n                                        className={cn(\"size-6\", {\n                                            \"dark:invert\": item.darkInvertImage,\n                                        })}\n                                    />\n                                    <div className=\"grow\">\n                                        <div className=\"flex items-center gap-2\">\n                                            <p className=\"grow text-base/none font-medium\">{item.name}</p>\n                                        </div>\n                                        {showDescription && (\n                                            <p className=\"text-muted-foreground mt-0.5 line-clamp-1\">\n                                                {item.description}\n                                            </p>\n                                        )}\n                                    </div>\n                                    {showCapabilities && (\n                                        <div className=\"absolute end-0 flex translate-x-5 scale-90 items-center gap-1.5 rounded bg-inherit px-2.5 py-1 opacity-0 transition-all duration-300 group-hover:translate-x-0 group-hover:scale-100 group-hover:opacity-100\">\n                                            {item.capabilities.map((capability) => (\n                                                <CapabilityBadge capability={capability} key={capability} />\n                                            ))}\n                                        </div>\n                                    )}\n                                </DropdownMenuItem>\n                            ))}\n                        </div>\n                    </ScrollArea>\n                </DropdownMenuContent>\n            </DropdownMenu>\n        </TooltipProvider>\n    );\n};\n"
        }
    ]
}
